<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>在GitHub上创建一个自己的博客网站</title>
    <link href="/2022/01/01/%E7%AC%AC%E4%B8%80%E4%B8%AA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2%E7%BD%91%E7%AB%99/"/>
    <url>/2022/01/01/%E7%AC%AC%E4%B8%80%E4%B8%AA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2%E7%BD%91%E7%AB%99/</url>
    
    <content type="html"><![CDATA[<p>#第一个自己的博客网站#<br>　　程序员都知道要创建一个自己的个人网站，可以记录自己学习的过程以及分享，在创建的过程中有很多难题解决感到成就感慢慢讲给别人又听不懂，个人感觉就像小黄鸭测试法，就让我来分享个人搭建的过程吧。<br>##本文目的##<br>　　在Git Page建立免费的个人网站，通过插件和主题来写博客</p><p>###GitHub Pages是什么？###<br> 　　首先你需要知道什么是GitHub，GitHub是一个面向开源及私有软件项目的托管平台，因为只支持Git作为唯一的版本库格式进行托管，故名GitHub。————百度百科</p><p> 　　GitHub Pages是一个静态站点托管服务，可直接从GitHub上的存储库获取HTML，CSS和JavaScript文件，还可以选择在构建过程中运行这些文件并发布网站。您可以在GitHub Pages examples集合中查看GitHub Pages网站的示例；您可以将站点托管在GitHub的github.io域或您自己的自定义域上</p><p> 　　GitHub Pages会发布您推送到存储库的所有静态文件。您可以创建自己的静态文件，也可以使用静态网站生成器为您构建网站。您还可以在本地或另一台服务器上自定义自己的构建过程。我们建议使用Jekyll，它是静态站点生成器，具有对GitHub Pages的内置支持和简化的构建过程。————更多关于GitHub Pages的介绍</p><p>###Hexo是什么？###</p><p>　　Hexo 是一款简单地、轻量地、基于Node.js的一个静态博客框架也可以说是静态博客网站生成器，作者是来自台湾的Tommy Chen。</p><p>###主要步骤###</p><p>-hexo的初级搭建还有部署到github page上，以及个人域名的绑定.</p><p>-hexo的基本配置，更换主题</p><p>###Hexo搭建步骤###</p><p>####安装Git####</p><p>　　Git是目前世界上最先进的分布式版本控制系统，可以有效、高速的处理从很小到非常大的项目版本管理。也就是用来管理你的hexo博客文章，上传到GitHub的工具。Git非常强大，我觉得建议每个人都去了解一下。廖雪峰老师的Git教程写的非常好，大家可以了解一下。Git教程</p><p>　　windows：到git官网<a href="https://git-scm.com/" title="Git官网">https://git-scm.com/</a>上下载,Download git,下载后会有一个Git Bash的命令行工具，以后就用这个工具来使用git。</p><p>　　linux：对linux来说实在是太简单了，因为最早的git就是在linux上编写的，只需要一行代码</p><div class="code-wrapper"><pre><code class="hljs">sudo apt-get install git</code></pre></div><p>　　安装好后，用<code>git --version</code> 来查看一下版本</p><p>####安装nodejs####</p><p>　　Hexo是基于nodeJS编写的，所以需要安装一下nodeJs和里面的npm工具。</p><p>　　windows：nodejs<a href="http://nodejs.cn/">http://nodejs.cn/</a>选择LTS版本就行了。</p><p>　　linux：</p><div class="code-wrapper"><pre><code class="hljs">sudo apt-get install nodejssudo apt-get install npm</code></pre></div><p>安装完后，打开命令行</p><div class="code-wrapper"><pre><code class="hljs">node -vnpm -v</code></pre></div><p>　　检查一下有没有安装成功。<br>　　windows在git安装完后，就可以直接使用git bash来敲命令行了，不用自带的cmd。</p><p>####安装Hexo####</p><p>　　前面git和nodejs安装好后，就可以安装hexo了，你可以先创建一个文件夹blog，然后cd到这个文件夹下（或者在这个文件夹下直接右键git bash打开）。</p><p>输入命令</p><div class="code-wrapper"><pre><code class="hljs">npm install -g hexo-cli</code></pre></div><p>依旧用<code>hexo -v</code>查看一下版本</p><p>　　接着安装hexo-deployer-git插件，该插件用于将hexo生成的静态html文件上传部署到Github Page上</p><div class="code-wrapper"><pre><code class="hljs">npm install --save hexo-deployer-git</code></pre></div><p>　　至此就全部安装完了。</p><p>　　接下来初始化一下hexo</p><div class="code-wrapper"><pre><code class="hljs">hexo init myblog</code></pre></div><p>　　这个myblog可以自己取什么名字都行，然后</p><div class="code-wrapper"><pre><code class="hljs">cd myblog //进入这个myblog文件夹npm install</code></pre></div><p>　　新建完成后，指定文件夹目录下有：</p><p>　　　　node_modules: 依赖包</p><p>　　　　public：存放生成的页面</p><p>　　　　scaffolds：生成文章的一些模板</p><p>　　　　source：用来存放你的文章</p><p>　　　　themes：主题</p><p> 　　　　_config.yml: 博客的配置文件 //与后面的主题配置文件类似但不要混淆~~</p><div class="code-wrapper"><pre><code class="hljs">hexo g  //生成网站静态文件到默认设置的 public 文件夹hexo server //启动本地服务器</code></pre></div><p>　　打开hexo的服务，在浏览器输入localhost:4000就可以看到你生成的博客了。</p><p>　　使用ctrl+c可以把服务关掉。</p><p>　　这会儿你就可以看到自己的网站了，只不过我们还没有上传到GitHub中，接下来我为大家讲解。</p><p>####GitHub创建个人仓库####<br>#####首先，你先要注册一个GitHub账户。</p><p>　　注册完登录后，在GitHub.com中看到一个New repository，新建仓库</p><p>　　创建一个和你用户名相同的仓库!!!!!!(这很重要!不一样后面会报404错误!) 后面加.github.io，只有这样，将来要部署到GitHub page的时候，才会被识别，也就是xxxx.github.io，其中xxx就是你注册GitHub的用户名。</p><p>　　点击create repository。</p><p>#####生成SSH添加到GitHub######<br>　　回到你的git bash中，</p><div class="code-wrapper"><pre><code class="hljs">git config --global user.name &quot;yourname&quot;git config --global user.email &quot;youremail&quot;</code></pre></div><p>　　这里的yourname输入你的GitHub用户名，youremail输入你GitHub的邮箱。这样GitHub才能知道你是不是对应它的账户。</p><p>　　可以用以下两条，检查一下你有没有输对</p><div class="code-wrapper"><pre><code class="hljs">git config user.namegit config user.email</code></pre></div><p>　　然后创建SSH,一路回车</p><div class="code-wrapper"><pre><code class="hljs">ssh-keygen -t rsa -C &quot;youremail&quot;</code></pre></div><p>　　这个时候它会告诉你已经生成了.ssh的文件夹。在你的电脑中找到这个文件夹。</p><p>　　ssh，简单来讲，就是一个秘钥，其中，＿id＿rsa是你这台电脑的私人秘钥，不能给别人看的，＿id＿rsa.pub是公共秘钥，可以随便给别人看。把这个公钥放在GitHub上，这样当你链接GitHub自己的账户时，它就会根据公钥匹配你的私钥，当能够相互匹配时，才能够顺利的通过git上传你的文件到GitHub上。</p><p>　　而后在GitHub的setting中，找到SSH keys的设置选项，点击New SSH key</p><p>　　把你的id_rsa.pub里面的信息复制进去。</p><p>　　在gitbash中，查看是否成功</p><div class="code-wrapper"><pre><code class="hljs">ssh -T git@github.com</code></pre></div><p>######将hexo部署到GitHub#####<br>　　这一步，我们就可以将hexo和GitHub关联起来，也就是将hexo生成的文章部署到GitHub上，打开站点配置文件 _config.yml，翻到最后，修改YourgithubName就是你的GitHub账户</p><div class="code-wrapper"><pre><code class="hljs">deploy:      type: git      repo: https://github.com/YourgithubName/YourgithubName.github.io.git      branch: master</code></pre></div><p>　　这个时候需要先安装deploy-git ，也就是部署的命令,这样你才能用命令部署到GitHub。</p><div class="code-wrapper"><pre><code class="hljs">npm install hexo-deployer-git --save</code></pre></div><p>　　然后</p><div class="code-wrapper"><pre><code class="hljs">hexo clean //清除了你之前生成的东西，可以不加hexo generate //生成静态文章  hexo g缩写hexo deploy   //部署文章      hexo d缩写</code></pre></div><p>　　注意deploy时可能要你输入username和password。</p><p>　　部署成功了，过一会儿就可以在<a href="http://yourname.github.io/">http://yourname.github.io</a> 这个网站看到你的博客了</p><p>#####使用个人域名#####</p><p>　　现在你的个人网站的地址是 yourname.github.io，如果觉得这个网址逼格不太够，这就需要你设置个人域名了。但是需要花钱。</p><p>　　注册一个腾讯云账户,在腾讯云上买一个域名，我买的是 andjiaz.com <a href="http://www.andjiaz.com/" title="andjiaz">http://www.andjiaz.com</a>，各个后缀的价格不太一样，比如最广泛的.com就比较贵，看个人喜好咯。</p><p>　　你需要先去进行实名认证,然后在域名控制台中，看到你购买的域名。</p><p>　　点解析进去，添加解析。</p><p>　　解析线路选择默认，记录类型选择CNAME，主机记录选择*，记录值填写yourname.github.io其他一切默认就行。</p><p>　　登录GitHub，进入之前创建的仓库，点击settings，设置Custom domain，输入你的域名andjiaz.com</p><p>　　然后在你的博客文件source中创建一个名为CNAME文件，不要后缀。写上你的域名。</p><p>　　最后，在gitbash中，输入</p><div class="code-wrapper"><pre><code class="hljs">hexo cleanhexo ghexo d</code></pre></div><p>　　过不了多久，再打开你的浏览器，输入你自己的域名，就可以看到搭建的网站啦！</p><p>　　接下来你就可以正式开始写文章了。</p><p>　　然后在source/_post中打开markdown文件，就可以开始编辑了。当你写完的时候，再</p><div class="code-wrapper"><pre><code class="hljs">hexo cleanhexo ghexo d</code></pre></div><p>　　稍等片刻，不要着急，一般10分钟，我因为太着急以为程序错误导致修改别的报错，不久就可以看到更新了。</p><p>###Hexo主题配置###</p><p>　　进入 Hexo 官网主题，选择自己心仪的主题，点击进入（如博主点击 fluid 主题），可以看到主题里面有安装和部署的介绍或文档，很方便</p><p>　　进入 myblog 文件夹下的 themes 目录（如：E:\myblog\themes），安装 fluid 主题，这里我使用的是直接下载下来解压到themes文件中！！！！注意：一定要把文件名改成dluid，之后在myblog/_config.yml中将themes更换为fluid</p><div class="code-wrapper"><pre><code class="hljs">theme: fluid</code></pre></div><p>　　回到 myblog 目录，输入如下命令生成文件启动本地服务，查看效果</p><div class="code-wrapper"><pre><code class="hljs">hexo ghexo s --debug //在本地预览完成后Ctrl+c结束服务器，并运行hexo d，如果报错解决错误再上传。hexo d</code></pre></div><p>####配置说明####<br>　　在 Hexo 目录下（也就是myblog）有一个名为 _config.yml 的配置文件（E:\myblog），同时在下载的主题 fluid 目录下也有一个名为 _config.yml 的配置文件（E:\myblog\themes\fluid），大家不要搞混淆了，在 Hexo 目录下（myblog）下的 _config.yml 的配置文件是控制站点，比如网站的标题、图标、关键字、作者、语言等；而在 themes 目录下的 _config.yml 的配置文件顾名思义是控制主题的配置、包括文章、样式、显示、链接、图片等，这个博主就不多说了哈，每个主题作者都提供了非常详细的主题配置文档</p>]]></content>
    
    
    <categories>
      
      <category>网站搭建</category>
      
    </categories>
    
    
    <tags>
      
      <tag>GitHub</tag>
      
      <tag>Hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2021/12/31/%E9%92%9F%E5%A3%B0%E6%95%B2%E5%93%8D%E6%96%B0%E7%9A%84%E4%B8%80%E5%B9%B4/"/>
    <url>/2021/12/31/%E9%92%9F%E5%A3%B0%E6%95%B2%E5%93%8D%E6%96%B0%E7%9A%84%E4%B8%80%E5%B9%B4/</url>
    
    <content type="html"><![CDATA[<h1 id="钟声敲响新的一年"><a href="#钟声敲响新的一年" class="headerlink" title="钟声敲响新的一年"></a>钟声敲响新的一年</h1><hr><p> 在2021年中开心快乐，有喜欢的事情可以做，有喜欢的人可以去爱，她总是给我的生活添加一点有意思的事情，和她在一起是一件很美妙的事情。<br>忽然就有了想建立一个博客的冲动，起因很简单，还是喜欢记录一些生活各方面的事情，也会把它当作日记本来写，其实在这之前有在CSDN中写一些技术文章，不过还是喜欢拥有一个自己的网站来记录自己，如果也有相同爱好的小伙伴可以联系我。2021就写到这里，在12.31号晚上8点才开始着手准备建网站这件事，马上就钟声敲响，网站也建的草草的，所以这篇博客仅仅是一个简单的小开始，接下来我将会好好的对待这个网站，将一些有用的东西发表在上头，同时我也将挤出时间认真学习MarkDown。在新的2021一年里我将着手准备我的研究生考试。最后我还是想说很开心能够遇到我的女朋友，我的伴侣，激励着我的上进心和努力的目标，我会和她为了未来而奋斗。<br>我爱孔思悦！</p><p>2022年我将在这里写下我的博客关于技术文章，一些生活随笔以及设备测评等内容。</p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
